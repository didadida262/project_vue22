<!--
 * @Author: Hhvcg
 * @Date: 2023-04-19 10:53:49
 * @LastEditors: -_-
 * @Description: 
-->
### 图形化编程的性能问题影响因素

#### 卡顿问题原因及应对策略
- 大批高质量（平均4m）图片的排队、传输与下载耗时，绘制及更新(重排重绘)耗时  `已解决-多分辨率，控制图片数量`
- 显示的图形数量过大（同时刻界面操作图形个数阈值10000）。绘制及更新耗时。 `已解决-NMS筛减，控制图形个数`

`经过上面两个维度的改进，目前针对2w及以下缺陷级别的晶圆片，能够实现大部分场景下的丝滑操作`

#### 针对大几万数级甚至是几十上百万级别的点信息
页面交互时，还得严重考量`计算`的耗时，这是随着数据量的增加，导致的必然结果。每一次视图区域的改变，都会根据新视图的范围`获取缺陷信息`，再`利用NMS筛选操作`输出需要显示的信息，根据输出的显示信息，`绘制更新画布`。

视图区域的重排重绘耗时，最多也就500个点的耗时及最大四张图片。 关键在于，大数据量的情况下，视图区域内点个数的倍数增加，耗时也会成倍增加。

当前版本的nms耗时测算：
5k：6 -- 8ms
1w: 9 -- 10ms
2.1w：18ms
7w: 62 - 70ms
8.2w: 72ms
10w 75ms
51.6w: 330ms -- 360ms
100w: 1295ms+   --->  突破1s
200w: 2--3s

视图更新耗时(四张图片+最大500缺陷)：
275: 30 - 47ms 
330 35 - 50ms



浏览器图形的极限测试:

